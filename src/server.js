// src/server.js
import app from './app.js';
import { connectDB, disconnectDB } from './config/database.js';

// Configuration du port
const PORT = process.env.PORT || 3000;

/**
 * Fonction pour d√©marrer le serveur
 */
const startServer = async () => {
  try {
    // Se connecter √† la base de donn√©es
    await connectDB();
    
    // D√©marrer le serveur
    const server = app.listen(PORT, () => {
      console.log('üöÄ ================================');
      console.log(`üöó Vehicle API Server d√©marr√© !`);
      console.log(`üåê Port: ${PORT}`);
      console.log(`üìù Documentation: http://localhost:${PORT}/api-docs`);
      console.log(`üîó API URL: http://localhost:${PORT}/api/vehicles`);
      console.log(`üè• Health Check: http://localhost:${PORT}/health`);
      console.log(`üîß Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log('üöÄ ================================');
    });

    // Gestion propre de l'arr√™t du serveur
    const gracefulShutdown = (signal) => {
      console.log(`\nüì° Signal ${signal} re√ßu, arr√™t en cours...`);
      
      server.close(async () => {
        console.log('üîí Serveur HTTP ferm√©');
        
        // Fermer la connexion √† la base de donn√©es
        await disconnectDB();
        
        console.log('‚úÖ Arr√™t propre termin√©');
        process.exit(0);
      });
    };

    // √âcouter les signaux d'arr√™t
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Gestion des erreurs non g√©r√©es
    process.on('unhandledRejection', (err) => {
      console.error('‚ùå Promesse rejet√©e non g√©r√©e:', err);
      server.close(() => {
        process.exit(1);
      });
    });

    process.on('uncaughtException', (err) => {
      console.error('‚ùå Exception non g√©r√©e:', err);
      process.exit(1);
    });

    return server;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error.message);
    process.exit(1);
  }
};

// D√©marrer le serveur seulement si ce fichier est ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  startServer();
}

export default startServer;